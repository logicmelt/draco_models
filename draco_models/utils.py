import logging
import pathlib
import sys
from draco_models.config import LoggingConfig

LOGGER_LEVEL: dict[str, int] = {
    "DEBUG": logging.DEBUG,
    "INFO": logging.INFO,
    "WARNING": logging.WARNING,
    "ERROR": logging.ERROR,
    "CRITICAL": logging.CRITICAL,
}


def create_logger(name: str, log_config: LoggingConfig) -> logging.Logger:
    """
    Create a logger with the given name and log file.

    Args:
        name (str): The name of the logger.
        log_config (LoggingConfig): Configuration for logging, including level and output file.

    Returns:
        logging.Logger: The logger instance.
    """
    # Get the logging level
    level_log = LOGGER_LEVEL[log_config.logging_level.upper()]
    # Create the logger and set it to the desired level
    logger = logging.getLogger(name)
    if logger.hasHandlers():
        # If the logger already has handlers, return it
        return logger
    logger.setLevel(level_log)
    # Output file and log format
    FORMAT = logging.Formatter(
        "%(asctime)s - %(filename)s->%(funcName)s():%(lineno)s - [%(levelname)s] - %(message)s"
    )
    if not log_config.enabled:
        logger.propagate = False
        return logger

    if log_config.console:
        # If console logging is enabled, set up a console handler
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(FORMAT)
        logger.addHandler(console_handler)
    # If file logging is enabled, set up a file handler
    if log_config.file:
        # Create the log directory if it does not exist
        log_file = log_config.log_output / f"{name}.log"
        log_file.parent.mkdir(parents=True, exist_ok=True)
        # Create a file handler with the specified log file
        file_handler = logging.FileHandler(
            log_file, mode="w", encoding=None, delay=False
        )
        file_handler.setFormatter(FORMAT)
        logger.addHandler(file_handler)
    # Return the logger
    return logger


def setup_run_dir(save_dir: pathlib.Path) -> pathlib.Path:
    """Set up job directory.

    Args:
        save_dir (dict[str, Any]): Path to the save directory.
    Returns:
        (int): job_id. Autogenerated.
        (pathlib.Path): Path to the directory to save the results.
    """
    existing_job_idxs = [int(p.name) for p in save_dir.glob("[0-9]*/")] + [0]
    job_id = max(existing_job_idxs) + 1
    save_dir = save_dir / f"{job_id}/"
    save_dir.mkdir(parents=True)

    return save_dir
